package main

import (
	"bytes"
	"flag"
	"fmt"
	"github.com/davyxu/cellnet/util"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var paramOut = flag.String("out", "", "output file name")

func main() {

	flag.Parse()

	files := flag.Args()
	if len(files) == 0 {
		fmt.Println("Require go source file list")
		os.Exit(1)
	}

	fs := token.NewFileSet()

	p := &Package{}

	for _, filename := range files {

		file, err := parser.ParseFile(fs, filename, nil, parser.ParseComments)

		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

		err = p.Parse(file)
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}
	}

	genCode(*paramOut, p)

}

type Package struct {
	PackageName string

	Structs []*Struct
}

func (self *Package) Parse(fileNode *ast.File) error {

	self.PackageName = fileNode.Name.Name

	ast.Inspect(fileNode, func(n ast.Node) bool {

		switch typeSpec := n.(type) {
		case *ast.TypeSpec:

			switch typeSpecType := typeSpec.Type.(type) {
			case *ast.StructType:

				st := &Struct{
					Name: typeSpec.Name.Name,
				}

				st.Parse(typeSpecType)

				self.Structs = append(self.Structs, st)
			}
		}

		return true
	})

	return nil
}

func newFile() *Package {
	return &Package{}
}

type Struct struct {
	Name string

	Fields []*Field
}

func (self *Struct) MsgID() int {
	return int(util.StringHash(self.Name))
}

func (self *Struct) Parse(n *ast.StructType) {

	for _, fd := range n.Fields.List {

		f := &Field{}
		f.Parse(fd)

		self.Fields = append(self.Fields, f)
	}
}

type Field struct {
	Name string
	Type string
}

func (self *Field) Parse(n *ast.Field) {

	self.Name = n.Names[0].Name

	switch x := n.Type.(type) {
	case *ast.Ident:
		self.Type = x.Name
	}
}

const codeTemplate = `// Generated by github.com/davyxu/cellnet/internal-gen
// DO NOT EDIT!
package {{.PackageName}}

{{if gt (.Structs|len) 0}}
import (
	"github.com/davyxu/cellnet"
	_ "github.com/Blizzardx/GoGameServer/Core/Modules/codec/msgpack"
	"reflect"
	"fmt"
	"github.com/davyxu/cellnet/codec"
)
{{end}}

{{range .Structs}}
func (self *{{.Name}}) String() string { return fmt.Sprintf("%+v",*self) } {{end}}

func init() {
	{{range .Structs}}
	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("msgpack"),
		Type:  reflect.TypeOf((*{{.Name}})(nil)).Elem(),
		ID:     {{.MsgID}},
})
	{{end}}
}

`

func genCode(output string, f *Package) {

	generateCode("internal-gen", codeTemplate, output, f, &generateOption{formatGoCode: true})
}

type generateOption struct {
	formatGoCode bool

	outputData []byte
}

// 字段首字母大写
func publicFieldName(name string) string {
	return strings.ToUpper(string(name[0])) + name[1:]
}

func generateCode(templateName, templateStr, output string, model interface{}, opt *generateOption) {

	var err error

	if opt == nil {
		opt = &generateOption{}
	}

	var bf bytes.Buffer

	tpl, err := template.New(templateName).Parse(templateStr)
	if err != nil {
		goto OnError
	}

	err = tpl.Execute(&bf, model)
	if err != nil {
		goto OnError
	}

	if opt.formatGoCode {
		if err = formatCode(&bf); err != nil {
			fmt.Println("format golang code err", err)
		}
	}

	opt.outputData = bf.Bytes()

	if output != "" {

		os.MkdirAll(filepath.Dir(output), 666)

		err = ioutil.WriteFile(output, bf.Bytes(), 0666)

		if err != nil {
			goto OnError
		}
	}
	return

OnError:
	fmt.Println(err)
	os.Exit(1)
}

func formatCode(bf *bytes.Buffer) error {

	fset := token.NewFileSet()

	ast, err := parser.ParseFile(fset, "", bf, parser.ParseComments)
	if err != nil {
		return err
	}

	bf.Reset()

	err = (&printer.Config{Mode: printer.TabIndent | printer.UseSpaces, Tabwidth: 8}).Fprint(bf, fset, ast)
	if err != nil {
		return err
	}

	return nil
}
